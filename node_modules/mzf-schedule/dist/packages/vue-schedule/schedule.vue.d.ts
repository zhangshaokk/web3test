interface FormatTime {
    [key: string]: Array<string>;
}
declare const _default: import("vue").DefineComponent<{
    value: {
        type: import("vue").PropType<string>;
        required: true;
    };
    width: {
        type: import("vue").PropType<string>;
        default: string;
    };
    selectedText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    unselectedText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    morningText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    afternoonText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    weeksText: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: string;
    };
    showResult: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:value": (value: string) => void;
    formatTime: (list: FormatTime) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: import("vue").PropType<string>;
        required: true;
    };
    width: {
        type: import("vue").PropType<string>;
        default: string;
    };
    selectedText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    unselectedText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    morningText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    afternoonText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    weeksText: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: string;
    };
    showResult: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:value"?: ((value: string) => any) | undefined;
    onFormatTime?: ((list: FormatTime) => any) | undefined;
}, {
    width: string;
    selectedText: string;
    unselectedText: string;
    morningText: string;
    afternoonText: string;
    weeksText: string[];
    placeholder: string;
    showResult: boolean;
}, {}>;
export default _default;
